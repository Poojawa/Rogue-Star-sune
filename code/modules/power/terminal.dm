// the underfloor wiring terminal for the APC
// autogenerated when an APC is placed
// all conduit connects go to this object instead of the APC
// using this solves the problem of having the APC in a wall yet also inside an area

/obj/machinery/power/terminal
	name = "terminal (L2)"
	icon = 'icons/obj/cables/structures.dmi'
	icon_state = "term"
	desc = "It's an underfloor wiring terminal for power equipment."
	level = 1
	plane = PLATING_PLANE
	anchored = TRUE
	layer = WIRE_TERMINAL_LAYER
	unacidable = TRUE
	cable_layer = CABLE_LAYER_2
	var/wirecolors = CABLELAYERTWOCOLOR
	var/obj/machinery/power/master = null
	can_change_cable_layer = FALSE	// too much headache with multi-set SMES terminals

/obj/machinery/power/terminal/layer1
	name = "terminal (L1)"
	cable_layer = CABLE_LAYER_1
	wirecolors = CABLELAYERONECOLOR

/obj/machinery/power/terminal/layer3
	name = "terminal (L3)"
	cable_layer = CABLE_LAYER_3|CABLE_LAYER_4
	wirecolors = CABLELAYERTHREECOLOR


// Needed so terminals are not removed from machines list.
// Powernet rebuilds need this to work properly.
/obj/machinery/power/terminal/process()
	return TRUE

/obj/machinery/power/terminal/Initialize()
	. = ..()
	var/turf/T = get_turf(src)
	if(level==1)
		hide(!T.is_plating())
	if(!powernet)
		connect_to_network()

/obj/machinery/power/terminal/Destroy()
	if(master)
		master.disconnect_terminal(cable_layer)
		master = null
	return ..()

/obj/machinery/power/terminal/hide(i)
	if(i)
		invisibility = INVISIBILITY_MAXIMUM
		icon_state = "term-f"
		var/image/I = image(icon, icon_state = "termcables-f", layer = layer)
		I.color = wirecolors
		add_overlay(I)
	else
		invisibility = 0
		icon_state = "term"
		var/image/I = image(icon, icon_state = "termcables", layer = layer)
		I.color = wirecolors
		add_overlay(I)

/obj/machinery/power/terminal/hides_under_flooring()
	return TRUE

/obj/machinery/power/terminal/overload(var/obj/machinery/power/source)
	if(master)
		master.overload(source)

/obj/machinery/power/terminal/should_have_node()
	return TRUE

/obj/machinery/power/proc/can_terminal_dismantle()
	. = FALSE

/obj/machinery/power/apc/can_terminal_dismantle()
	. = FALSE
	if(opened)
		. = TRUE

/obj/machinery/power/smes/can_terminal_dismantle()
	. = FALSE
	if(panel_open)
		. = TRUE

/obj/machinery/power/terminal/dismantle(mob/living/user, obj/item/I, cable_layer)
	if(!istype(I))
		return
	if(isturf(loc))
		var/turf/T = loc
		if(!T.is_plating())
			to_chat(user, span_warning("You must remove the floor plating first!"))
			return FALSE

	if(master && !master.can_terminal_dismantle())
		return FALSE

	user.visible_message(span_notice("[user.name] dismantles the cable terminal from [master]."))
	playsound(src.loc, 'sound/items/deconstruct.ogg', 50, TRUE)
	if(I.has_tool_quality(TOOL_WIRECUTTER))
		if(do_after(user, 20 * I.toolspeed))
			if(master && !master.can_terminal_dismantle())
				return FALSE

		if(prob(50) && electrocute_mob(user, powernet, src, 1, TRUE))
			var/datum/effect/effect/system/spark_spread/sparks = new /datum/effect/effect/system/spark_spread()
			sparks.set_up(5, 0, src)
			sparks.attach(loc)
			sparks.start()
			return FALSE

		var/obj/item/stack/cable_coil/coilrefund =new /obj/item/stack/cable_coil(get_turf(src), 10)
		coilrefund.color = wirecolors
		qdel(src)
		master.disconnect_terminal(cable_layer)
		to_chat(user, span_warning("You finish removing the terminal."))
		update_cable_icons_on_turf(get_turf(src))
		return TRUE
	else
		to_chat(user, span_warning("You need to use a wirecutting tool!"))
		return FALSE
